/**/
#include <ros/ros.h>
#include <serial/serial.h>
#include <std_msgs/String.h>
#include <std_msgs/Empty.h>

serial::Serial ser;

class SubscribeAndPublish
{
public:
    SubscribeAndPublish()
    {
	write_pub = nh.advertise<std_msgs::String>("write", 1000);
	read_sub = nh.subscribe("read", 1000, read_callback);
    }

    void read_callback(const std_msgs::String::ConstPtr& msg)
    {
        ROS_INFO_STREAM("New request: [%s]" << msg->data);
	data = msg->data
	std_msgs::String priority;
	//......include the main body of the code here.......//
	// priority.data = "1,2,3,4,5"
	write_pub.publish(priority);
        //ser.write(msg->data);
    }   

private:
    ros::NodeHandle nh;
    ros::Publisher write_pub;
    ros::Subscriber read_sub;
    string data;
}

//void write_callback(const std_msgs::String::ConstPtr& msg){
//    ROS_INFO_STREAM("Permission granted: [%s]" << msg->data);
//    ser.write(msg->data);
//}

int main (int argc, char** argv){
    ros::init(argc, argv, "sample_base_test_node_with_class");
    SubscribeAndPublish fhdusia;
    

//    ros::Subscriber read_sub = nh.subscribe("read", 1000, read_callback);
//    ros::Publisher write_pub = nh.advertise<std_msgs::String>("write", 1000);



//    if(ser.isOpen()){
//        ROS_INFO_STREAM("Serial Port initialized");
//    }else{
//        return -1;
//    }

    ros::Rate loop_rate(5);
    while(ros::ok()){

        ros::spinOnce();

//        if(ser.available()){
//            ROS_INFO_STREAM("Reading from serial port");
//            std_msgs::String result;
//            result.data = ser.read(ser.available());
//            ROS_INFO_STREAM("Read: " << result.data);
	    
//           read_pub.publish(result);
        }
        loop_rate.sleep();

    }
}

